$OpenBSD$

add creation/destroy of tun devices

--- src/util/virnetdevtap.c.orig	Thu Jun 25 16:00:33 2015
+++ src/util/virnetdevtap.c	Wed Jul 22 07:32:39 2015
@@ -478,6 +478,146 @@ int virNetDevTapDelete(const char *ifname,
     return ret;
 }
 
+#elif defined(SIOCIFCREATE) && defined(SIOCIFDESTROY)
+
+/* stolen from OpenBSD ifconfig */
+int
+setifflags(const char *vname, struct ifreq ifr, int value)
+{
+	int s;
+	short flags;
+        struct ifreq my_ifr;
+
+        bcopy((char *)&ifr, (char *)&my_ifr, sizeof(struct ifreq));
+
+        if ((s = virNetDevSetupControl(vname, &my_ifr)) < 0)
+          return -1;
+        if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&my_ifr) < 0) {
+        	virReportSystemError(errno, "%s %s",
+                             _("Cannot get flags for interface "), vname);
+	}
+        (void) strlcpy(my_ifr.ifr_name, vname, sizeof(my_ifr.ifr_name));
+        flags = my_ifr.ifr_flags;
+
+        if (value < 0) {
+                value = -value;
+                flags &= ~value;
+        } else
+                flags |= value;
+        my_ifr.ifr_flags = flags;
+        if (ioctl(s, SIOCSIFFLAGS, (caddr_t)&my_ifr) < 0) {
+        	virReportSystemError(errno, "%s %s",
+                             _("Cannot set flags for interface "), vname);
+		return 1;
+	}
+	return 0;
+}
+
+int virNetDevTapCreate(char **ifname,
+                       const char *tunpath ATTRIBUTE_UNUSED,
+                       int *tapfd,
+                       size_t tapfdSize,
+                       unsigned int flags ATTRIBUTE_UNUSED)
+{
+    int s;
+    struct ifreq ifr;
+    int ret = -1;
+    int unit = 0;
+    char tmpname[IFNAMSIZ];
+
+    if (tapfdSize > 1) {
+        virReportError(VIR_ERR_CONFIG_UNSUPPORTED, "%s",
+                       _("Multiqueue devices are not supported on this system"));
+        goto cleanup;
+    }
+        virReportSystemError(errno, "%s %s", "trying to create tun/tap device: ", *ifname);
+
+    /* As OpenBSD doesn't have tap, we use tun.
+     * In case we were given exact interface name (e.g. 'tunN'),
+     * we just rename to it. If we have format string like
+     * 'tun%d', we need to find the first available name that
+     * matches this pattern
+     */
+
+    ret = snprintf(tmpname, IFNAMSIZ, "tun%d", unit);
+    if (ret == -1 || ret >= IFNAMSIZ)
+        goto cleanup;    
+
+
+    while ( unit < INT_MAX ) {
+      virReportSystemError(errno, "%s %d", "in while loop for tun unit ", unit);
+
+      if ((s = virNetDevSetupControl(tmpname, &ifr)) < 0)
+          return -1;
+
+      if (virNetDevExists(tmpname) == 1) {
+        unit++;
+        ret = snprintf(tmpname, IFNAMSIZ, "tun%d", unit);
+        if (ret == -1 || ret >= IFNAMSIZ)
+          goto cleanup;
+        continue;
+      }
+
+      /* tun device to act like tap device */
+      ret = ioctl(s, SIOCIFCREATE, &ifr);
+      if (ret < 0) {
+        virReportSystemError(errno, "%s", _("Unable to create tun device"));
+        goto cleanup;
+      } else {
+        virReportSystemError(errno, "%s %d", "seems I was able to create tun unit ", unit);
+        sleep(2);
+        if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0) {
+          virReportSystemError(errno, "%s %d", "seems I am unabl to get tun flags ", unit);
+          goto cleanup;
+        } else {
+          virReportSystemError(errno, "%s %d", "seems I got tun flags for unit ", unit);
+        }
+	setifflags(tmpname, ifr, IFF_LINK0);
+	sleep(2);
+        //ifr.ifr_flags |= IFF_LINK0;
+        //ifr.ifr_flags &= IFF_LINK0;
+        //if (ioctl(s, SIOCSIFFLAGS, (caddr_t)&ifr) < 0) {
+        //  virReportSystemError(errno, "%s %d", "seems I am unabl to set tun flags ", unit);
+        //  goto cleanup;
+        //} else {
+        //  virReportSystemError(errno, "%s %d", "seems I did set LINK0 flag on tun flags for unit ", unit);
+        //}
+        ret = snprintf(*ifname, IFNAMSIZ, "tun%d", unit);
+        if (ret == -1 || ret >= IFNAMSIZ)
+          goto cleanup;
+        break;
+      }
+    }
+
+    ret = 0;
+ cleanup:
+    VIR_FORCE_CLOSE(s);
+
+    return ret;
+
+}
+int virNetDevTapDelete(const char *ifname,
+                       const char *tunpath ATTRIBUTE_UNUSED)
+{
+    int s;
+    struct ifreq ifr;
+    int ret = -1;
+
+    if ((s = virNetDevSetupControl(ifname, &ifr)) < 0)
+        return -1;
+
+    if (ioctl(s, SIOCIFDESTROY, &ifr) < 0) {
+        virReportSystemError(errno, 
+                             _("Unable to remove tap device %s"),
+                             ifname);
+        goto cleanup;
+    }
+
+    ret = 0;
+ cleanup:
+    VIR_FORCE_CLOSE(s);
+    return ret;
+}
 #else
 int virNetDevTapCreate(char **ifname ATTRIBUTE_UNUSED,
                        const char *tunpath ATTRIBUTE_UNUSED,
