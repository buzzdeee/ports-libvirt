$OpenBSD$
--- src/qemu/qemu_command.c.orig	Mon Jul 20 07:22:24 2015
+++ src/qemu/qemu_command.c	Fri Jul 24 07:33:48 2015
@@ -300,6 +300,7 @@ static int qemuCreateInBridgePortWithHelper(virQEMUDri
         virCommandAddArgFormat(cmd, "--use-vnet");
     virCommandAddArgFormat(cmd, "--br=%s", brname);
     virCommandAddArgFormat(cmd, "--fd=%d", pair[1]);
+        virReportSystemError(errno, "%s %d", "qemuCreateInBridgePortWithHelper: the FD: ", pair[1]);
     virCommandPassFD(cmd, pair[1],
                      VIR_COMMAND_PASS_FD_CLOSE_PARENT);
     virCommandClearCaps(cmd);
@@ -365,29 +366,35 @@ qemuNetworkIfaceConnect(virDomainDefPtr def,
         virReportError(VIR_ERR_INTERNAL_ERROR, "%s", _("Missing bridge name"));
         goto cleanup;
     }
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: trying to connect to bridge: %s", brname);
 
     if (!net->ifname ||
         STRPREFIX(net->ifname, VIR_NET_GENERATED_PREFIX) ||
         strchr(net->ifname, '%')) {
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: testing net->ifname %p", net->ifname);
         VIR_FREE(net->ifname);
         if (VIR_STRDUP(net->ifname, VIR_NET_GENERATED_PREFIX "%d") < 0)
             goto cleanup;
         /* avoid exposing vnet%d in getXMLDesc or error outputs */
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: setting template_ifname to true %p", net->ifname);
         template_ifname = true;
     }
 
     if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_VNET_HDR) &&
         net->model && STREQ(net->model, "virtio")) {
         tap_create_flags |= VIR_NETDEV_TAP_CREATE_VNET_HDR;
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: setting tap_create_flags != VIR_NETDEV_TAP_CREATE_VNET_HDR %d", tap_create_flags);
     }
 
     if (virQEMUDriverIsPrivileged(driver)) {
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: seems I am virQEMUDriverIsPrivileged driver: %p", driver);
         if (virNetDevTapCreateInBridgePort(brname, &net->ifname, &net->mac,
                                            def->uuid, tunpath, tapfd, *tapfdSize,
                                            virDomainNetGetActualVirtPortProfile(net),
                                            virDomainNetGetActualVlan(net),
                                            tap_create_flags) < 0) {
             virDomainAuditNetDevice(def, net, tunpath, false);
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here in if virNetDevTapCreateInBridgePort, going to cleanup now device definition: %p", def);
             goto cleanup;
         }
         if (virDomainNetGetActualBridgeMACTableManager(net)
@@ -399,10 +406,15 @@ qemuNetworkIfaceConnect(virDomainDefPtr def,
              * entry ourselves (during qemuInterfaceStartDevices(),
              * using the MAC address from the interface config.
              */
-            if (virNetDevBridgePortSetLearning(brname, net->ifname, false) < 0)
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here in if virDomainNetGetActualBridgeMACTableManager: %p", net);
+            if (virNetDevBridgePortSetLearning(brname, net->ifname, false) < 0) {
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here in if virNetDevBridgePortSetLearning, was error, going to cleanup: %p", net);
                 goto cleanup;
-            if (virNetDevBridgePortSetUnicastFlood(brname, net->ifname, false) < 0)
+	}
+            if (virNetDevBridgePortSetUnicastFlood(brname, net->ifname, false) < 0) {
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here in if virNetDevBridgePortSetUnicastFlood, was error, going to cleanup: %p", net);
                 goto cleanup;
+		}
         }
     } else {
         if (qemuCreateInBridgePortWithHelper(cfg, brname,
@@ -419,20 +431,25 @@ qemuNetworkIfaceConnect(virDomainDefPtr def,
     }
 
     virDomainAuditNetDevice(def, net, tunpath, true);
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: after auditing virDomainAuditNetDevice: %p", net);
 
     if (cfg->macFilter &&
         ebtablesAddForwardAllowIn(driver->ebtables,
                                   net->ifname,
-                                  &net->mac) < 0)
+                                  &net->mac) < 0) {
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here in if cfg->macFilter: %s", net->ifname);
         goto cleanup;
+    }
 
     if (net->filter &&
         virDomainConfNWFilterInstantiate(def->uuid, net) < 0) {
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here in if net->filter: %s", net->ifname);
         goto cleanup;
     }
 
     ret = 0;
 
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here just before cleanup: %s", net->ifname);
  cleanup:
     if (ret < 0) {
         size_t i;
@@ -443,6 +460,7 @@ qemuNetworkIfaceConnect(virDomainDefPtr def,
     }
     virObjectUnref(cfg);
 
+    virReportSystemError(errno, "qemuNetworkIfaceConnect: here just after cleanup: %s returning: %d", net->ifname, ret);
     return ret;
 }
 
@@ -940,14 +958,14 @@ qemuAssignDeviceDiskAlias(virDomainDefPtr vmdef,
                           virDomainDiskDefPtr def,
                           virQEMUCapsPtr qemuCaps)
 {
-    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_DRIVE)) {
-        if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_DEVICE))
-            return qemuAssignDeviceDiskAliasCustom(vmdef, def, qemuCaps);
-        else
-            return qemuAssignDeviceDiskAliasFixed(def);
-    } else {
+    //if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_DRIVE)) {
+    //    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_DEVICE))
+    //        return qemuAssignDeviceDiskAliasCustom(vmdef, def, qemuCaps);
+    //    else
+    //        return qemuAssignDeviceDiskAliasFixed(def);
+    //} else {
         return qemuAssignDeviceDiskAliasLegacy(def);
-    }
+    //}
 }
 
 
@@ -2670,12 +2688,14 @@ qemuBuildDeviceAddressStr(virBufferPtr buf,
             goto cleanup;
         }
         virBufferAsprintf(buf, ",bus=%s", contAlias);
+virReportSystemError(errno, "qemuBuildDeviceAddressStr got buf up to: %s", buf->e);
 
         if (info->addr.pci.multi == VIR_TRISTATE_SWITCH_ON)
             virBufferAddLit(buf, ",multifunction=on");
         else if (info->addr.pci.multi == VIR_TRISTATE_SWITCH_OFF)
             virBufferAddLit(buf, ",multifunction=off");
         virBufferAsprintf(buf, ",addr=0x%x", info->addr.pci.slot);
+virReportSystemError(errno, "qemuBuildDeviceAddressStr got buf up to: %s", buf->e);
         if (info->addr.pci.function != 0)
            virBufferAsprintf(buf, ".0x%x", info->addr.pci.function);
     } else if (info->type == VIR_DOMAIN_DEVICE_ADDRESS_TYPE_USB) {
@@ -3959,9 +3979,11 @@ qemuBuildDriveStr(virConnectPtr conn,
     if (virBufferCheckError(&opt) < 0)
         goto error;
 
+                virReportSystemError(errno, "%s %s", "qemuBuildDriveStr before error case: ", opt.e);
     return virBufferContentAndReset(&opt);
 
  error:
+                virReportSystemError(errno, "%s %s", "qemuBuildDriveStr in error case: ", opt.e);
     VIR_FREE(source);
     virBufferFreeAndReset(&opt);
     return NULL;
@@ -4208,6 +4230,7 @@ qemuBuildDriveDevStr(virDomainDefPtr def,
             virBufferAsprintf(&opt, ",event_idx=%s",
                               virTristateSwitchTypeToString(disk->event_idx));
         }
+virReportSystemError(errno, "qemuBuildDriveDevStr got this option string: %s", opt.e);
         if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_VIRTIO_BLK_SCSI)) {
             /* if sg_io is true but the scsi option isn't supported,
              * that means it's just always on in this version of qemu.
@@ -4291,9 +4314,11 @@ qemuBuildDriveDevStr(virDomainDefPtr def,
     if (virBufferCheckError(&opt) < 0)
         goto error;
 
+                virReportSystemError(errno, "%s %s", "qemuBuildDriveDevStr before first return: ", opt.e);
     return virBufferContentAndReset(&opt);
 
  error:
+                virReportSystemError(errno, "%s %s", "qemuBuildDriveDevStr in error: ", opt.e);
     virBufferFreeAndReset(&opt);
     return NULL;
 }
@@ -6669,6 +6694,7 @@ static char *qemuBuildTPMBackendStr(const virDomainDef
                 goto error;
             }
 
+        virReportSystemError(errno, "%s %d", "qemuBuildTPMBackendStr: the tmp FD: ", *tpmfd);
             virCommandPassFD(cmd, *tpmfd,
                              VIR_COMMAND_PASS_FD_CLOSE_PARENT);
             devset = qemuVirCommandGetDevSet(cmd, *tpmfd);
@@ -6684,6 +6710,7 @@ static char *qemuBuildTPMBackendStr(const virDomainDef
             }
             VIR_FREE(cancel_path);
 
+        virReportSystemError(errno, "%s %d", "qemuBuildTPMBackendStr: the cancel FD: ", *cancelfd);
             virCommandPassFD(cmd, *cancelfd,
                              VIR_COMMAND_PASS_FD_CLOSE_PARENT);
             cancel_path = qemuVirCommandGetDevSet(cmd, *cancelfd);
@@ -8294,6 +8321,7 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
     virNetDevBandwidthPtr actualBandwidth;
     size_t i;
 
+    virReportSystemError(errno, "qemuBuildInterfaceCommandLine vlan: %d bootindex: %d, actualType %d", vlan, bootindex, actualType);
 
     if (!bootindex)
         bootindex = net->info.bootIndex;
@@ -8331,28 +8359,41 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
 
     if (actualType == VIR_DOMAIN_NET_TYPE_NETWORK ||
         actualType == VIR_DOMAIN_NET_TYPE_BRIDGE) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine actual type is: %d, seems to be either NETWORK or BRIDGE", actualType);
         tapfdSize = net->driver.virtio.queues;
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine setting tapfdSize to: %d", tapfdSize);
         if (!tapfdSize)
             tapfdSize = 1;
 
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine setting tapfdSize now is: %d", tapfdSize);
         if (VIR_ALLOC_N(tapfd, tapfdSize) < 0 ||
             VIR_ALLOC_N(tapfdName, tapfdSize) < 0)
             goto cleanup;
 
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine I was able to allocate space for tapfd %d and tapfdName", tapfd[0]);
+
         memset(tapfd, -1, tapfdSize * sizeof(tapfd[0]));
 
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine now after memsetting all tapfds %d to -1", tapfd[0]);
+
         if (qemuNetworkIfaceConnect(def, driver, net,
                                     qemuCaps, tapfd,
-                                    &tapfdSize) < 0)
+                                    &tapfdSize) < 0) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine qemuNetworkIfaceConnect result was < 0, going to cleanup, tapfd[0]: %d", tapfd[0]);
             goto cleanup;
+        }
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine qemuNetworkIfaceConnect result was successfull, tapfd[0]: %d", tapfd[0]);
     } else if (actualType == VIR_DOMAIN_NET_TYPE_DIRECT) {
         if (VIR_ALLOC(tapfd) < 0 || VIR_ALLOC(tapfdName) < 0)
             goto cleanup;
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine actualType == DIRECT: %d", actualType);
         tapfdSize = 1;
         tapfd[0] = qemuPhysIfaceConnect(def, driver, net,
                                         qemuCaps, vmop);
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine after qemuPhysIfaceConnect, tapfd[0]: %d", tapfd[0]);
         if (tapfd[0] < 0)
             goto cleanup;
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine after qemuPhysIfaceConnect,  survived going to cleanup, tapfd[0]: %d", tapfd[0]);
     }
 
     /* For types whose implementations use a netdev on the host, add
@@ -8364,16 +8405,21 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
     case VIR_DOMAIN_NET_TYPE_BRIDGE:
     case VIR_DOMAIN_NET_TYPE_DIRECT:
     {
-        int nicindex;
+        int nicindex = 21;
 
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine here in switch virDomainNetType,  %d", actualType);
         /* network and bridge use a tap device, and direct uses a
          * macvtap device
          */
         if (virQEMUDriverIsPrivileged(driver) && nicindexes && nnicindexes &&
             net->ifname) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine here in switch virDomainNetType, seems I'm privileged,  %d", actualType);
             if (virNetDevGetIndex(net->ifname, &nicindex) < 0 ||
-                VIR_APPEND_ELEMENT(*nicindexes, *nnicindexes, nicindex) < 0)
+                VIR_APPEND_ELEMENT_COPY(*nicindexes, *nnicindexes, nicindex) < 0) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine here in switch virDomainNetType, getting index seemed to have failed,  %d", actualType);
                 goto cleanup;
+		}
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine here in switch virDomainNetType, got nicindex:  %d", nicindex);
         }
         break;
     }
@@ -8403,8 +8449,10 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
     actualBandwidth = virDomainNetGetActualBandwidth(net);
     if (actualBandwidth) {
         if (virNetDevSupportBandwidth(actualType)) {
-            if (virNetDevBandwidthSet(net->ifname, actualBandwidth, false) < 0)
+            if (virNetDevBandwidthSet(net->ifname, actualBandwidth, false) < 0) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine setting actualBandwidth failed going to cleanup:  %p", actualBandwidth);
                 goto cleanup;
+		}
         } else {
             VIR_WARN("setting bandwidth on interfaces of "
                      "type '%s' is not implemented yet",
@@ -8428,22 +8476,32 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
             goto cleanup;
 
         memset(vhostfd, -1, vhostfdSize * sizeof(vhostfd[0]));
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine after memsetting all vhostfd to -1:  %p", def);
 
-        if (qemuOpenVhostNet(def, net, qemuCaps, vhostfd, &vhostfdSize) < 0)
+        if (qemuOpenVhostNet(def, net, qemuCaps, vhostfd, &vhostfdSize) < 0) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine qemuOpenVhostNet failed, going to cleanup:  %p", def);
             goto cleanup;
+	}
     }
 
     for (i = 0; i < tapfdSize; i++) {
         if (virSecurityManagerSetTapFDLabel(driver->securityManager,
-                                            def, tapfd[i]) < 0)
+                                            def, tapfd[i]) < 0) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine: virSecurityManagerSetTapFDLabel failed, going to cleanup index: %d", i);
             goto cleanup;
+	}
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine: the tapFD: %d with index: %d, tapfdSize: %d", tapfd[i], i, tapfdSize);
         virCommandPassFD(cmd, tapfd[i],
                          VIR_COMMAND_PASS_FD_CLOSE_PARENT);
-        if (virAsprintf(&tapfdName[i], "%d", tapfd[i]) < 0)
+        if (virAsprintf(&tapfdName[i], "%d", tapfd[i]) < 0) {
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine: the tapFD: %d going to cleanup, because of tapfd thingie", tapfd[i]);
             goto cleanup;
+        }
+        virReportSystemError(errno, "qemuBuildInterfaceCommandLine: the tapFD name: %s", tapfdName[i]);
     }
 
     for (i = 0; i < vhostfdSize; i++) {
+        virReportSystemError(errno, "%s %d", "qemuBuildInterfaceCommandLine: the vhostFD: ", vhostfd[i]);
         virCommandPassFD(cmd, vhostfd[i],
                          VIR_COMMAND_PASS_FD_CLOSE_PARENT);
         if (virAsprintf(&vhostfdName[i], "%d", vhostfd[i]) < 0)
@@ -10719,6 +10777,7 @@ qemuBuildCommandLine(virConnectPtr conn,
                             goto error;
                         }
 
+        virReportSystemError(errno, "%s %d", "qemuBuildCommandLine: the configFD: ", configfd);
                         virCommandPassFD(cmd, configfd,
                                          VIR_COMMAND_PASS_FD_CLOSE_PARENT);
                     }
@@ -10794,6 +10853,7 @@ qemuBuildCommandLine(virConnectPtr conn,
         } else if (STREQ(migrateFrom, "stdio")) {
             if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_MIGRATE_QEMU_FD)) {
                 virCommandAddArgFormat(cmd, "fd:%d", migrateFd);
+        virReportSystemError(errno, "%s %d", "qemuBuildCommandLine: the migrateFD: ", migrateFd);
                 virCommandPassFD(cmd, migrateFd, 0);
             } else if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_MIGRATE_QEMU_EXEC)) {
                 virCommandAddArg(cmd, "exec:cat");
@@ -10823,6 +10883,7 @@ qemuBuildCommandLine(virConnectPtr conn,
                 goto error;
             }
             virCommandAddArg(cmd, migrateFrom);
+        virReportSystemError(errno, "%s %d", "qemuBuildCommandLine: the migrateFD again: ", migrateFd);
             virCommandPassFD(cmd, migrateFd, 0);
         } else if (STRPREFIX(migrateFrom, "unix")) {
             if (!virQEMUCapsGet(qemuCaps, QEMU_CAPS_MIGRATE_QEMU_UNIX)) {
